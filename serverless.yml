service: access-ton-service
frameworkVersion: '3'

custom:
  serverless-dynamodb:
    stages:
      - dev
    port: 8000
    docker: false
    start:
      host: 127.0.0.1
      migrate: true

provider:
  name: aws
  runtime: nodejs18.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
  environment:
    USERS_TABLE: users-table

functions:
  get-access-counter:
    handler: src/infra/lambdas/get-access-counter-handler.handler
    events:
      - http:
          path: /count
          method: get

  add-access-counter:
    handler: src/infra/lambdas/add-access-counter-handler.handler
    events:
      - http:
          path: /count
          method: put

  create-user:
    handler: src/infra/lambdas/create-user-handler.handler
    events:
      - http:
          path: /user
          method: post

  get-user:
    handler: src/infra/lambdas/get-user-handler.handler
    events:
      - http:
          path: /user
          method: get

  health-check:
    handler: src/infra/lambdas/health-check-handler.handler
    events:
      - http:
          path: /health
          method: get

resources:
  Resources:
    UsersTable: ${file(resources/dynamo.users.table.yml)}
    CountTable: ${file(resources/dynamo.access.counter.table.yml)}

plugins:
  - serverless-plugin-typescript
  - serverless-tscpaths
  - serverless-dynamodb
  - serverless-offline